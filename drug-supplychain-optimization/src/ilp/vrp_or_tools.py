# src/vrp_or_tools.py
import os
import json
import math
from ortools.constraint_solver import pywrapcp, routing_enums_pb2

RESULTS_DIR = "results"

def solve_vehicle_routing():
    print("\n--- Solving Vehicle Routing Problem ---")
    
    # Load orders generated by the RL agent
    orders_path = os.path.join(RESULTS_DIR, "orders_for_vrp.json")
    with open(orders_path, "r") as f:
        orders = json.load(f)

    # Create location list [depot, customer1, customer2, ...]
    locations = [(0, 0)]  # Depot at origin
    for order in orders:
        locations.append((order["x"], order["y"]))

    # Create distance matrix
    num_locations = len(locations)
    dist_matrix = [[0] * num_locations for _ in range(num_locations)]
    for i in range(num_locations):
        for j in range(num_locations):
            if i != j:
                dist_matrix[i][j] = int(math.hypot(locations[i][0] - locations[j][0], locations[i][1] - locations[j][1]))

    # VRP Solver
    num_vehicles = 4
    manager = pywrapcp.RoutingIndexManager(num_locations, num_vehicles, 0) # 0 is the depot index
    routing = pywrapcp.RoutingModel(manager)

    def distance_callback(from_index, to_index):
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return dist_matrix[from_node][to_node]

    transit_callback_index = routing.RegisterTransitCallback(distance_callback)
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = (routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)

    solution = routing.SolveWithParameters(search_parameters)

    # Save and print the routes
    routes = []
    if solution:
        for vehicle_id in range(num_vehicles):
            index = routing.Start(vehicle_id)
            route = []
            while not routing.IsEnd(index):
                node_index = manager.IndexToNode(index)
                route.append(node_index)
                index = solution.Value(routing.NextVar(index))
            route.append(manager.IndexToNode(index)) # Add end node (depot)
            if len(route) > 2: # Only save non-empty routes
                routes.append({"vehicle_id": vehicle_id, "route": route})
        
        with open(os.path.join(RESULTS_DIR, "vehicle_routes.json"), "w") as f:
            json.dump(routes, f, indent=4)
        print(f"✅ Found and saved routes for {len(routes)} vehicles.")
    else:
        print("❌ No solution found for Vehicle Routing.")

if __name__ == "__main__":
    solve_vehicle_routing()